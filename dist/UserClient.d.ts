import Client from './Client';
import Track from './structures/Track';
import Artist from './structures/Artist';
import { AffinityOptions, Image, Paging, PagingOptions, RawObject } from './Types';
import Album from './structures/Album';
/**
 * A class which accesses the current user endpoints!
 */
export default class UserClient {
    client: Client;
    name: string;
    country: string;
    email: string;
    externalUrls: RawObject;
    totalFollowers: number;
    href: string;
    id: string;
    images: Image[];
    product: 'premium' | 'free' | 'open' | 'unknown';
    uri: string;
    /**
     * The same client but manages current user endpoints and requires a current user api token not a token which is generated by client and client secret
     *
     * @param token Your spotify current user token or provide your spotify client!
     * @example const user = new UserClient('token'); // or
     * const user = new UserClient(client);
     */
    constructor(client: Client);
    constructor(token: string);
    /**
     * Returns current user details
     *
     * @example const user = await user.info();
     */
    info(): Promise<this>;
    /**
     * Returns the top tracks of the current user!
     *
     * @param options Basic AffinityOptions
     * @example await user.getTopTracks();
     */
    getTopTracks(options?: AffinityOptions): Promise<Paging<Track>>;
    /**
     * Returns the top artists of the current user!
     *
     * @param options Basic AffinityOptions
     * @example await user.getTopArtists();
     */
    getTopArtists(options?: AffinityOptions): Promise<Paging<Artist>>;
    /**
     * Follow a playlist inshort words add the playlist to your library!
     *
     * @param id The id of the playlist!
     * @param options Options such as public!
     * @example await client.user.followPlaylist('id');
     */
    followPlaylist(id: string, options?: {
        public?: boolean;
    }): Promise<boolean>;
    /**
     * Unfollow a playlist by id!
     *
     * @param id The id of the playlist!
     * @example await client.user.unfollowPlaylist('id');
     */
    unfollowPlaylist(id: string): Promise<boolean>;
    /**
     * Verify if the current user follows a paticualr playlist by id!
     *
     * @param id Spotify playlist id
     * @example const follows = await client.user.followsPlaylist('id');
     */
    followsPlaylist(id: string): Promise<boolean>;
    /**
     * Returns the user's following list of artists!
     *
     * @param options Options such as after and limit!
     * @example const artists = await client.user.getFollowingArtists();
     */
    getFollowingArtists(options?: {
        after?: string;
        limit?: number;
    }): Promise<Paging<Artist>>;
    /**
     * Follow artists with their spotify ids!
     *
     * @param ids An array of spotify artist ids
     * @example await client.user.followArtists('id1', 'id2');
     */
    followArtists(...ids: string[]): Promise<boolean>;
    /**
     * Unfollow artists with their spotify ids!
     *
     * @param ids An array of spotify artist ids
     * @example await client.user.unfollowArtists('id1', 'id2');
     */
    unfollowArtists(...ids: string[]): Promise<boolean>;
    /**
     * Follow users with their spotify ids!
     *
     * @param ids An array of spotify user ids
     * @example await client.user.followUsers('id1', 'id2');
     */
    followUsers(...ids: string[]): Promise<boolean>;
    /**
     * Unfollow users with their spotify ids!
     *
     * @param ids An array of spotify user ids
     * @example await client.user.unfollowUsers('id1', 'id2');
     */
    unfollowUsers(...ids: string[]): Promise<boolean>;
    /**
     * Verify if the array of artists supplied is been followed by you!
     *
     * @param ids Array of spotify artist ids
     * @example const [followsArtist] = await client.user.followsArtists('id1');
     */
    followsArtists(...ids: string[]): Promise<boolean[]>;
    /**
     * Verify if the array of users supplied is been followed by you!
     *
     * @param ids Array of spotify users ids
     * @example const [followsUser] = await client.user.followsUsers('id1');
     */
    followsUsers(...ids: string[]): Promise<boolean[]>;
    /**
     * Returns the saved albums of the current user
     *
     * @param options Basic PagingOptions
     * @example const albums = await client.user.getAlbums();
     */
    getAlbums(options?: PagingOptions): Promise<Paging<Album>>;
    /**
     * Add albums to your spotify savelist!
     *
     * @param ids Spotify albums ids to add to your save list!
     * @example await client.user.addAlbums('id1', 'id2');
     */
    addAlbums(...ids: string[]): Promise<boolean>;
    /**
     * Remove albums from your spotify savelist!
     *
     * @param ids Spotify albums ids to remove from your save list!
     * @example await client.user.deleteAlbums('id1', 'id2');
     */
    deleteAlbums(...ids: string[]): Promise<boolean>;
    /**
     * Check if those albums exist on the current user's library!
     *
     * @param ids Array of spotify album ids
     * @example const [hasFirstAlbum, hasSecondAlbum] = await client.user.hasAlbums('id1', 'id2');
     */
    hasAlbums(...ids: string[]): Promise<boolean[]>;
}
