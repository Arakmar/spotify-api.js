import Client from './Client';
import { handleError, UnexpectedError } from './Errors';
import Track from './structures/Track';
import Artist from './structures/Artist';
import { AffinityOptions, Image, RawObject } from './Types';

/**
 * A class which accesses the current user endpoints!
 */
export default class UserClient{

    client!: Client;
    
    name: string;
    country: string;
    email: string;
    externalUrls: RawObject;
    totalFollowers: number;
    href: string;
    id: string;
    images: Image[];
    product: 'premium' | 'free' | 'open' | 'unknown';
    uri: string;

    affinity: {
        tracks: Track[];
        artists: Artist[];
    };

    /**
     * The same client but manages current user endpoints and requires a current user api token not a token which is generated by client and client secret
     * 
     * @param token Your spotify current user token or provide your spotify client!
     * @example const user = new UserClient('token'); // or
     * const user = new UserClient(client);
     */
    constructor(client: Client);
    constructor(token: string);
    constructor(token: string | Client){
        
        this.name = '';
        this.country = '';
        this.email = 'unknown';
        this.externalUrls = {};
        this.totalFollowers = 0;
        this.product = 'unknown';
        this.images = [];
        this.uri = '';
        this.id = '';
        this.href = '';

        this.affinity = {
            tracks: [],
            artists: []
        }

        Object.defineProperty(this, 'client', { value: typeof token == 'string' ? new Client(token) : token });

    }

    /**
     * Returns current user details
     * 
     * @example const user = await user.info(); 
     */
    async info(): Promise<this> {

        try{
            const data = await this.client.util.fetch('/me');

            this.name = data.display_name;
            this.country = data.country || 'unknown';
            this.id = data.id;
            this.email = data.email || 'unknown';
            this.externalUrls = data.external_urls;
            this.totalFollowers = data.followers.total;
            this.href = data.href;
            this.images = data.images;
            this.product = data.product || 'unknown';
            this.uri = data.uri;
        }catch(e){
            throw new UnexpectedError(e);
        }

        return this;

    }

    /**
     * Returns the top tracks of the current user!
     * 
     * @param options Basic AffinityOptions
     * @example await user.getTopTracks();
     */
    async getTopTracks(options: AffinityOptions = {}): Promise<Track[]> {

        try{
            const tracks = (await this.client.util.fetch('/me/top/tracks', {
                params: options as RawObject
            })).items.map(x => new Track(x, this.client));

            if(this.client.cacheOptions.cacheCurrentUser) this.affinity.tracks = tracks;
            return tracks;
        }catch(e){
            return handleError(e) || [];
        }

    }

    /**
     * Returns the top artists of the current user!
     * 
     * @param options Basic AffinityOptions
     * @example await user.getTopArtists();
     */
    async getTopArtists(options: AffinityOptions = {}): Promise<Artist[]> {

        try{
            const artists = (await this.client.util.fetch('/me/top/artists', {
                params: options as RawObject
            })).items.map(x => new Artist(x, this.client));

            if(this.client.cacheOptions.cacheCurrentUser) this.affinity.artists = artists;
            return artists;
        }catch(e){
            return handleError(e) || [];
        }

    }

    /**
     * Follow a playlist inshort words add the playlist to your library!
     * 
     * @param id The id of the playlist!
     * @param options Options such as public!
     * @example await client.user.followPlaylist('id');
     */
    async followPlaylist(id: string, options: {
        public?: boolean;
    } = { public: true }): Promise<boolean> {

        try{
            await this.client.util.fetch(`/playlists/${id}/followers`, {
                method: 'PUT',
                headers: {
                    "Content-Type": "application/json"
                },
                body: {
                    public: options.public ||true
                }
            });

            return true;
        }catch(e){
            return handleError(e) || false;
        }

    }

    /**
     * Unfollow a playlist by id!
     * 
     * @param id The id of the playlist!
     * @example await client.user.unfollowPlaylist('id');
     */
     async unfollowPlaylist(id: string): Promise<boolean> {

        try{
            await this.client.util.fetch(`/playlists/${id}/followers`, { method: 'DELETE' });
            return true;
        }catch(e){
            return handleError(e) || false;
        }

    }

};